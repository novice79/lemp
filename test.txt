docker build -t lemp .
pkg -t node10-linux-x64 init.js

git tag 1.0
git push origin --tags

docker run -p 10080:80 -p 3306:3306 -p 33060:33060 -d \
--name lemp -t lemp 

docker run --rm -it --entrypoint=bash --name lemp -t lemp 

getent passwd | grep mysql

getent passwd | awk -F: '{ print $1}'
awk -F: '{ print $1}' /etc/passwd
cut -d: -f1 /etc/passwd

 docker run -it --rm --entrypoint=bash php:fpm

node -e "const { execSync } = require('child_process'); const data=execSync( `php-fpm -F` );console.log(data)"

docker system prune
docker image prune -f

//////////////////////// build php from source
cat <<EOT >> /etc/apt/sources.list.d/buster.list
deb http://deb.debian.org/debian buster main
deb http://security.debian.org/debian-security buster/updates main
deb http://deb.debian.org/debian buster-updates main
EOT

cat <<EOT >> /etc/apt/preferences.d/argon2-buster
Package: *
Pin: release n=buster
Pin-Priority: -10

Package: libargon2*
Pin: release n=buster
Pin-Priority: 990
EOT
// warning: libssl.so.1.0.2, needed by /usr/lib/x86_64-linux-gnu/libcurl.so, may conflict with libssl.so.1.1

apt-get update && apt-get install -y autoconf build-essential curl libtool \
  libssl1.0-dev libcurl4-openssl-dev libxml2-dev libreadline7 \
  libreadline-dev libzip-dev libzip4 nginx openssl \
  pkg-config zlib1g-dev libpq-dev libedit-dev libsodium-dev \
  libsqlite3-dev libjpeg-dev libpng-dev libxpm-dev libargon2-dev \
  wget git && apt autoremove -y
wget http://sg2.php.net/distributions/php-7.3.0.tar.xz
tar Jxvf php-7.3.0.tar.xz 
cd php-7.3.0
./configure \
    --enable-soap \
    --enable-mysqlnd \
    --enable-mbstring \
    --enable-phpdbg \
    --enable-shmop \
    --enable-sockets \
    --enable-ftp \
    --enable-sysvmsg \
    --enable-sysvsem \
    --enable-sysvshm \
    --enable-pcntl \
    --enable-zip \
    --enable-bcmath \
    --enable-fpm \
    --with-jpeg-dir \
    --with-png-dir \
    --with-pdo-mysql \
    --with-pdo-mysql=mysqlnd \
    --with-pdo-pgsql=/usr/bin/pg_config \
    --with-fpm-user=www-data \
    --with-fpm-group=www-data \
    --with-libzip=/usr/lib/x86_64-linux-gnu \
    --with-mhash \
    --with-zlib \
    --with-curl \
    --with-pear \
    --with-openssl \
    --with-libedit \
    --with-password-argon2 \
    --with-sodium=shared \
    --with-readline

make -j4
root@364b0b02df37:/tmp/php-7.3.0# make install
Installing shared extensions:     /usr/local/lib/php/extensions/no-debug-non-zts-20180731/
Installing PHP CLI binary:        /usr/local/bin/
Installing PHP CLI man page:      /usr/local/php/man/man1/
Installing PHP FPM binary:        /usr/local/sbin/
Installing PHP FPM defconfig:     /usr/local/etc/
Installing PHP FPM man page:      /usr/local/php/man/man8/
Installing PHP FPM status page:   /usr/local/php/php/fpm/
Installing phpdbg binary:         /usr/local/bin/
Installing phpdbg man page:       /usr/local/php/man/man1/
Installing PHP CGI binary:        /usr/local/bin/
Installing PHP CGI man page:      /usr/local/php/man/man1/
Installing build environment:     /usr/local/lib/php/build/
Installing header files:          /usr/local/include/php/
Installing helper programs:       /usr/local/bin/
  program: phpize
  program: php-config
Installing man pages:             /usr/local/php/man/man1/
  page: phpize.1
  page: php-config.1
Installing PEAR environment:      /usr/local/lib/php/

Warning: "continue" targeting switch is equivalent to "break". Did you mean to use "continue 2"? in phar:///tmp/php-7.3.0/pear/install-pear-nozlib.phar/PEAR/PackageFile/v2/Validator.php on line 1933
[PEAR] Archive_Tar    - already installed: 1.4.3
[PEAR] Console_Getopt - already installed: 1.4.1
[PEAR] Structures_Graph- already installed: 1.1.1
[PEAR] XML_Util       - already installed: 1.4.2
[PEAR] PEAR           - already installed: 1.10.5
Wrote PEAR system config file at: /usr/local/etc/pear.conf
You may want to add: /usr/local/lib/php to your php.ini include_path
/tmp/php-7.3.0/build/shtool install -c ext/phar/phar.phar /usr/local/bin
ln -s -f phar.phar /usr/local/bin/phar
Installing PDO headers:           /usr/local/include/php/ext/pdo/

cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf
cp /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf
sed 's@NONE@/usr/local@g' -i /usr/local/etc/php-fpm.conf
mkdir -p /usr/local/etc/php/conf.d
cp -v php.ini-* /usr/local/etc/php/
cp /usr/local/etc/php/php.ini-production /usr/local/lib/php.ini
pear config-set php_ini /usr/local/lib/php.ini
pecl config-set php_ini /usr/local/lib/php.ini
pecl install igbinary && yes | pecl install redis
pecl install mongodb

// grep extension_dir=  `which php-config`
// php -m
// docker ps -as
// sed 's@^listen = /run.*$@listen = 127.0.0.1:9000@g' -i /etc/php/7.3/fpm/pool.d/www.conf

sed -i "2i127.0.0.1\tmysql" /etc/hosts

docker run -p 10080:80 -p 3306:3306 -p 33060:33060 -d -v $PWD/php_src:/var/www:rw -v $PWD/../mysql:/var/lib/mysql  --name lemp -t lemp

docker run -p 10080:80 -p 3306:3306 -p 33060:33060 -d \
-e MYSQL_ROOT_PASSWORD=aaa \
-e MYSQL_USER=aaa_user \
-e MYSQL_PASSWORD=aaa_pass \
-e MYSQL_DATABASE=aaa_db \
-v /data/php_src:/var/www:rw \
-v /data/temp/mysql:/var/lib/mysql  \
--name lemp -t novice/lemp

rm -- "$0"

docker run -p 10080:80 -p 3306:3306 -p 33060:33060 -d -v $PWD/php_src:/var/www:rw  --name lumen -t lumen

cat <<EOT > $sql_init_file
CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD:=freego}' ;
ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD:=freego}';
GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION;
CREATE USER IF NOT EXISTS '${MYSQL_USER:=david}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD:=freego}';
GRANT ALL ON *.* TO '$MYSQL_USER'@'%';
CREATE USER IF NOT EXISTS 'slaveuser'@'%' IDENTIFIED WITH sha256_password BY 'freego';
GRANT REPLICATION SLAVE ON *.* TO 'slaveuser'@'%';
${MYSQL_DATABASE:+"CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};"}
FLUSH PRIVILEGES;
EOT

# bash generate random 32 character alphanumeric string (upper and lowercase) and 
NEW_UUID=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

# bash generate random 32 character alphanumeric string (lowercase only)
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1

# Random numbers in a range, more randomly distributed than $RANDOM which is not
# very random in terms of distribution of numbers.

# bash generate random number between 0 and 9
cat /dev/urandom | tr -dc '0-9' | fold -w 256 | head -n 1 | head --bytes 1

# bash generate random number between 0 and 99
NUMBER=$(cat /dev/urandom | tr -dc '0-9' | fold -w 256 | head -n 1 | sed -e 's/^0*//' | head --bytes 2)
if [ "$NUMBER" == "" ]; then
  NUMBER=0
fi

# bash generate random number between 0 and 999
NUMBER=$(cat /dev/urandom | tr -dc '0-9' | fold -w 256 | head -n 1 | sed -e 's/^0*//' | head --bytes 3)
if [ "$NUMBER" == "" ]; then
  NUMBER=0
fi